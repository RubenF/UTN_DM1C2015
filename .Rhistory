tuneLength = 7)
if(!require("ISLR")) install.packages("ISLR")
if(!require("caret")) install.packages("caret")
library (ISLR)
data_set <- Carseats
# Categizo sales
data_set$Sales <- as.factor(ifelse(Sales <= 8 ,"No" ,"Yes"))
library (ISLR)
data_set <- Carseats
# Categizo sales
data_set$Sales <- as.factor(ifelse(data_Set$Sales <= 8 ,"No" ,"Yes"))
library (ISLR)
data_set <- Carseats
data_set$Sales <- as.factor(ifelse(data_set$Sales <= 8 ,"No" ,"Yes"))
fitControl <- trainControl(method = "cv", number = 5)
modelo <- train(Sales ~ ., data = data_set,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneLength = 7)
R.version.string
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
install_from_swirl("R Programming")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x3
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z+2 + 100
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/myqrt
my_div <- z/my_qrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
getwd()
ls()
x<-9
ls()
list.files()
?list.files
arg(list.files())
args(list.files())
args(list.files)
old.dir <- getwd()
testdir <_ dir.create()
testdir <- dir.create()
?dir.create()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
files.exists("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vec >=6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Ruben")
my_name
paste(my_name, collapse = " ")
("Hello","world!", sep = " ")
paste("Hello","world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data
)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect[c("foo", "bar")]
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
'!5 == 7'
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > o]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
yect
vect
names(Vect())
names(Vect)
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect[c("foo", "bar")]
vect["bar"]
vect[c("foo", "bar")]
Sys.Date()
mean(c(2, 4, 5))
test_func1()
boring_function('My first function!')
skip()
bye()
install_from_swirl("R Programming")
swirl()
boring_function('My first function!')
boring_function
getwd()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c("Hello", "world", ",", "how", "are", "we", "today", "?"))
play()
telegram("Buenos", "dias")
nxt()
submit()
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
submit()
submit()
"I love R!"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect
)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(letters)
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
flips2 <- rbinom(100, size = 1, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10, 100, 25)
rnorm(10)
rnorm(10, 100, 25)
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
sapply(flags, unique)
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quartes(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(caret)
load(caret)
?load
?library
set.seed(13435)
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x
x <- X[sample(1:5),];X$var2[c(1,3)]=NA
x <- x[sample(1:5),];X$var2[c(1,3)]=NA
x
x <- x[sample(1:5),]; x$var2[c(1,3)]=NA
x
vv <- c(1, 2, 3, 7, 8, 9)
vv
cut1 <- cut(vv, 3)
vv <- c(1, 2, 3, 7, 8, 9)
cut1
summary(cut1)
library(dplyr)
if(!require("dplyr"))
install.packages("dplyr")
library(dplyr)
install.packages('dplyr', repos='http://cran.rstudio.com/'
)
library(dplyr)
library(hflights)
library(dplyr)
if(!require("plyr"))
install.packages("plyr")
library(plyr)
library(hflights)
install.packages(c("dplyr","hflights"))
install.packages(c("dplyr", "hflights"))
library(hflights)
head(hflights)
data("hflights")
library(plyr)
library(dplyr)
library(plyr)
library(dplyr)
rm(list=ls())
# Defino el directoria de trabajo
setwd("C:/Users/Ruben/UTN_DM1C2015")
#Confirmo mi directorio de trabajo
getwd()
# Importo librerías
if(!require("ggplot2"))
install.packages("ggplot2")
library(ggplot2)
if(!require("caret"))
install.packages("caret")
library(caret)
if(!require("pROC"))
install.packages("pROC")
library(pROC)
if(!require("sqldf"))
install.packages("sqldf")
library(sqldf)
# Cargo los datos del banco
message("Cargando datos...")
datos_banco <- read.table("banco4_remix.csv", sep = ",", header = T)
message("Carga de datos --> LISTO!!!")
head(datos_banco)
str(datos_banco)
summary(datos_banco)
tail(datos_banco)
# Re escalo la varible y para que "si" sea la clase por defecto
class(datos_banco$edad)
datos_banco <- within(datos_banco, y <- relevel(y, ref = "si"))
# COnstruyo las métricas
message("Armado de la función METRICAS....")
metricas <- function(data, lev = NULL, model = NULL, ...)
{
# Armo la clase predicha en función a una p
# Probabilidad que voy a usar como corte para un "si"
predicho <- ifelse(data$si > 0.5, "si", "no")
# F1 score. Esta es la métrica que me ayuda a elegir el mejor modelo.
true_pos  <- sum(predicho == "si" & data$obs == "si")
false_pos <- sum(predicho == "si" & data$obs == "no")
false_neg <- sum(predicho == "no" & data$obs == "si")
F1_score  <- (2 * true_pos) / (2 * true_pos + false_neg + false_pos)
# Precission
prec <- sum(predicho == "si" & data$obs== "si") / sum(predicho == "si")
# Recall
recall <- sum(predicho == "si" & data$obs== "si") / sum(data$obs == "si")
#Me Interesa evaluar con otra variable que a mi me interese, por ejemplo: Plata!
# En plata
#
#             PREDICHO
#             SI		NO
#   REAL	SI	750		-750
#         NO	-100		0
#
#
plataCosto <-         750 * sum(predicho == "si" & data$obs== "si")
plataCosto <- plataCosto - 100 * sum(predicho == "si" & data$obs== "no")
plataCosto <- plataCosto - 750 * sum(predicho == "no" & data$obs== "si")
names(plataCosto) <- "PlataCosto"
plataGcia <-       - 750 * sum(predicho == "si" & data$obs== "si")
plataGcia <- plataCosto + 100 * sum(predicho == "si" & data$obs== "no")
plataGcia <- plataCosto + 750 * sum(predicho == "no" & data$obs== "si")
names(plataGcia) <- "PlataGcia"
# Armo el vector de outPut
outPut <- c(F1_score, plataCosto, plataGcia, prec, recall)
names(outPut) <- c("F1_score", "PlataCosto", "PlataGcia", "Precission" , "Recall")
# Agrego a la salida el valor del área bajo la curva roc
auc_metrics <- twoClassSummary(data, lev, model)
return(c(outPut, auc_metrics[1]))
}
message("Armado de la función METRICAS. LISTO")
#Estructura del experimento
fitControl <- trainControl(method = "cv",     #CV --> Cross Validation
number = 3,        # 3 folds
verboseIter = T,
classProbs = TRUE,
summaryFunction = metricas)
modelo <- train(y ~ .,                      # Voy a predecir y
data = datos_banco,         #  sobre el dataset: datos_banco
method = "rpart",           # Mi modelo en este caso es un "Arbol de decision" (rpart)
trControl = fitControl,     # Lo entreno con una estructura, que es la variable que creé antes
metric = "PlataCosto")
print(modelo)
plot(modelo)
ggplot(modelo)
# Corro el experimento
logisticFit <- train(y ~ .,
data = datos_banco,
method = "glm",         #glm --> regresion logistica
trControl = fitControl,
family = binomial)
print(logisticFit)
ggplot(logisticFit)
plot(logisticFit)
