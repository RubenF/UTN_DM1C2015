rm(list=ls())
# Defino el directoria de trabajo
setwd("C:/Users/Ruben/UTN_DM1C2015")
#Confirmo mi directorio de trabajo
getwd()
# Importo librerías
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("caret"))  install.packages("caret")
library(caret)
if(!require("pROC"))  install.packages("pROC")
library(pROC)
if(!require("sqldf")) install.packages("sqldf")
library(sqldf)
if(!require("dplyr")) install.packages("dplyr")
library(dplyr)
if(!require("doParallel"))  install.packages("doParallel")
library(doParallel)
library(rpart)
library(rpart)
# Cargo los datos del banco
message("Cargando datos...")
datos_banco <- read.table("banco6_remix.csv", sep = ",", header = T)
message("Carga de datos --> LISTO!!!")
# Verifico parte de los datos cargados
head(datos_banco)
# Separo en training y testing ()
set.seed(1234) # Semilla para que todos tengamos lo mismo
muestra <- sample(c(1:nrow(datos_banco)),
size = nrow(datos_banco)/10,
replace=FALSE)
BancoTraining <- datos_banco[-muestra,]
BancoTesting  <- datos_banco[muestra,]
# Construyo las métricas
message("Armado de la función METRICAS....")
metricas <- function(data, lev = NULL, model = NULL, ...)
{
# Armo la clase predicha en función a una p
# Probabilidad que voy a usar como corte para un "si"
predicho <- ifelse(data$si > 0.5, "si", "no")
# F1 score. Esta es la métrica que me ayuda a elegir el mejor modelo.
true_pos  <- sum(predicho == "si" & data$obs == "si")
false_pos <- sum(predicho == "si" & data$obs == "no")
false_neg <- sum(predicho == "no" & data$obs == "si")
F1_score  <- (2 * true_pos) / (2 * true_pos + false_neg + false_pos)
# Precission
prec <- sum(predicho == "si" & data$obs== "si") / sum(predicho == "si")
# Recall
recall <- sum(predicho == "si" & data$obs== "si") / sum(data$obs == "si")
#Me Interesa evaluar con otra variable que a mi me interese, por ejemplo: Plata
plata <-         750 * sum(predicho == "si" & data$obs== "si")
plata <- plata - 100 * sum(predicho == "si" & data$obs== "no")
plata <- plata - 750 * sum(predicho == "no" & data$obs== "si")
names(plata) <- "Plata"
# Armo el vector de outPut
outPut <- c(F1_score, plata, prec, recall)
names(outPut) <- c("F1_score", "Plata", "Precission" , "Recall")
# Agrego a la salida el valor del área bajo la curva roc
auc_metrics <- twoClassSummary(data, lev, model)
return(c(outPut, auc_metrics[1]))
}
message("Armado de la función METRICAS. LISTO")
#-------------------------------------------
#Estructura del experimento
#-------------------------------------------
fitControl <- trainControl(method = "cv",
number = 3,
verboseIter = T,
classProbs = TRUE,
summaryFunction = metricas)
modeloc50 <- train(y ~ .,
data = BancoTraining,
method = "C5.0",
trControl = fitControl)
print(modeloc50)
# Autor: Ing. Ruben Flecha
# Elimino todo lo que haya en memoria
rm(list=ls())
# Defino el directoria de trabajo
setwd("C:/Users/Ruben/UTN_DM1C2015")
#Confirmo mi directorio de trabajo
getwd()
# Importo librerías
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("caret"))  install.packages("caret")
library(caret)
if(!require("pROC"))  install.packages("pROC")
library(pROC)
if(!require("sqldf")) install.packages("sqldf")
library(sqldf)
if(!require("plyr")) install.packages("plyr")
library(plyr)
if(!require("dplyr")) install.packages("dplyr")
library(dplyr)
if(!require("doParallel"))  install.packages("doParallel")
library(doParallel)
library(rpart)
library(C50)
library(mlbench)
# Cargo los datos del banco
message("Cargando datos...")
datos_banco <- read.table("banco6_remix.csv", sep = ",", header = T)
message("Carga de datos --> LISTO!!!")
# Separo en training y testing ()
set.seed(1234) # Semilla para que todos tengamos lo mismo
muestra <- sample(c(1:nrow(datos_banco)),
size = nrow(datos_banco)/10,
replace=FALSE)
BancoTraining <- datos_banco[-muestra,]
BancoTesting  <- datos_banco[muestra,]
# Construyo las métricas
message("Armado de la función METRICAS....")
metricas <- function(data, lev = NULL, model = NULL, ...)
{
# Armo la clase predicha en función a una p
# Probabilidad que voy a usar como corte para un "si"
predicho <- ifelse(data$si > 0.5, "si", "no")
# F1 score. Esta es la métrica que me ayuda a elegir el mejor modelo.
true_pos  <- sum(predicho == "si" & data$obs == "si")
false_pos <- sum(predicho == "si" & data$obs == "no")
false_neg <- sum(predicho == "no" & data$obs == "si")
F1_score  <- (2 * true_pos) / (2 * true_pos + false_neg + false_pos)
# Precission
prec <- sum(predicho == "si" & data$obs== "si") / sum(predicho == "si")
# Recall
recall <- sum(predicho == "si" & data$obs== "si") / sum(data$obs == "si")
#Me Interesa evaluar con otra variable que a mi me interese, por ejemplo: Plata
plata <-         750 * sum(predicho == "si" & data$obs== "si")
plata <- plata - 100 * sum(predicho == "si" & data$obs== "no")
plata <- plata - 750 * sum(predicho == "no" & data$obs== "si")
names(plata) <- "Plata"
# Armo el vector de outPut
outPut <- c(F1_score, plata, prec, recall)
names(outPut) <- c("F1_score", "Plata", "Precission" , "Recall")
# Agrego a la salida el valor del área bajo la curva roc
auc_metrics <- twoClassSummary(data, lev, model)
return(c(outPut, auc_metrics[1]))
}
message("Armado de la función METRICAS. LISTO")
#-----------------------------------------------------
fitControl <- trainControl(method = "cv",
number = 3,
verboseIter = T,
classProbs = TRUE,
summaryFunction = metricas)
# Posgrado Introducción a la Minería de Datos
# Proyecto Banco -
# Autor: Ing. Ruben Flecha
# Elimino todo lo que haya en memoria
rm(list=ls())
# Defino el directoria de trabajo
setwd("C:/Users/Ruben/UTN_DM1C2015")
#Confirmo mi directorio de trabajo
getwd()
# Importo librerías
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("caret"))  install.packages("caret")
library(caret)
if(!require("pROC"))  install.packages("pROC")
library(pROC)
if(!require("sqldf")) install.packages("sqldf")
library(sqldf)
if(!require("plyr")) install.packages("plyr")
library(plyr)
if(!require("dplyr")) install.packages("dplyr")
library(dplyr)
if(!require("doParallel"))  install.packages("doParallel")
library(doParallel)
library(rpart)
library(C50)
library(mlbench)
# Cargo los datos del banco
message("Cargando datos...")
datos_banco <- read.table("banco6_remix.csv", sep = ",", header = T)
message("Carga de datos --> LISTO!!!")
# Separo en training y testing ()
set.seed(1234) # Semilla para que todos tengamos lo mismo
muestra <- sample(c(1:nrow(datos_banco)),
size = nrow(datos_banco)/10,
replace=FALSE)
BancoTraining <- datos_banco[-muestra,]
BancoTesting  <- datos_banco[muestra,]
# Construyo las métricas
message("Armado de la función METRICAS....")
metricas <- function(data, lev = NULL, model = NULL, ...)
{
# Armo la clase predicha en función a una p
# Probabilidad que voy a usar como corte para un "si"
predicho <- ifelse(data$si > 0.3, "si", "no")
# F1 score. Esta es la métrica que me ayuda a elegir el mejor modelo.
true_pos  <- sum(predicho == "si" & data$obs == "si")
false_pos <- sum(predicho == "si" & data$obs == "no")
false_neg <- sum(predicho == "no" & data$obs == "si")
F1_score  <- (2 * true_pos) / (2 * true_pos + false_neg + false_pos)
# Precission
prec <- sum(predicho == "si" & data$obs== "si") / sum(predicho == "si")
# Recall
recall <- sum(predicho == "si" & data$obs== "si") / sum(data$obs == "si")
#Me Interesa evaluar con otra variable que a mi me interese, por ejemplo: Plata
plata <-         750 * sum(predicho == "si" & data$obs== "si")
plata <- plata - 100 * sum(predicho == "si" & data$obs== "no")
plata <- plata - 750 * sum(predicho == "no" & data$obs== "si")
names(plata) <- "Plata"
# Armo el vector de outPut
outPut <- c(F1_score, plata, prec, recall)
names(outPut) <- c("F1_score", "Plata", "Precission" , "Recall")
# Agrego a la salida el valor del área bajo la curva roc
auc_metrics <- twoClassSummary(data, lev, model)
return(c(outPut, auc_metrics[1]))
}
message("Armado de la función METRICAS. LISTO")
#-----------------------------------------------------
#Estructura del experimento
#-----------------------------------------------------
fitControl <- trainControl(method = "cv",
number = 3,
verboseIter = T,
classProbs = TRUE,
summaryFunction = metricas)
#------------------------------------------------------
#-----------------------------------------------------------------------------------
#Modelo C5.0
modeloc50 <- train(y ~ .,
data = BancoTraining,
method = "C5.0",
trControl = fitControl)
print(modeloc50)
horainicio <- Sys.time()
print(horainicio)
horafin <- Sys.time()
tardo <- horafin - horainicio
print(tardo)
tardo <- horafin - horainicio
print(tardo)
horafin <- Sys.time()
tardo <- horafin - horainicio
print(tardo)
# Elimino todo lo que haya en memoria
rm(list=ls())
# Defino el directoria de trabajo
setwd("C:/Users/Ruben/UTN_DM1C2015")
#Confirmo mi directorio de trabajo
getwd()
# Importo librerías
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("caret"))  install.packages("caret")
library(caret)
if(!require("pROC"))  install.packages("pROC")
library(pROC)
if(!require("sqldf")) install.packages("sqldf")
library(sqldf)
if(!require("plyr")) install.packages("plyr")
library(plyr)
if(!require("dplyr")) install.packages("dplyr")
library(dplyr)
if(!require("doParallel"))  install.packages("doParallel")
library(doParallel)
library(rpart)
library(C50)
library(mlbench)
# Cargo los datos del banco
message("Cargando datos...")
datos_banco <- read.table("banco6_remix.csv", sep = ",", header = T)
message("Carga de datos --> LISTO!!!")
# Separo en training y testing ()
set.seed(1234) # Semilla para que todos tengamos lo mismo
muestra <- sample(c(1:nrow(datos_banco)),
size = nrow(datos_banco)/10,
replace=FALSE)
BancoTraining <- datos_banco[-muestra,]
BancoTesting  <- datos_banco[muestra,]
# Construyo las métricas
message("Armado de la función METRICAS....")
metricas <- function(data, lev = NULL, model = NULL, ...)
{
# Armo la clase predicha en función a una p
# Probabilidad que voy a usar como corte para un "si"
predicho <- ifelse(data$si > 0.3, "si", "no")
# F1 score. Esta es la métrica que me ayuda a elegir el mejor modelo.
true_pos  <- sum(predicho == "si" & data$obs == "si")
false_pos <- sum(predicho == "si" & data$obs == "no")
false_neg <- sum(predicho == "no" & data$obs == "si")
F1_score  <- (2 * true_pos) / (2 * true_pos + false_neg + false_pos)
# Precission
prec <- sum(predicho == "si" & data$obs== "si") / sum(predicho == "si")
# Recall
recall <- sum(predicho == "si" & data$obs== "si") / sum(data$obs == "si")
#Me Interesa evaluar con otra variable que a mi me interese, por ejemplo: Plata
plata <-         750 * sum(predicho == "si" & data$obs== "si")
plata <- plata - 100 * sum(predicho == "si" & data$obs== "no")
plata <- plata - 750 * sum(predicho == "no" & data$obs== "si")
names(plata) <- "Plata"
# Armo el vector de outPut
outPut <- c(F1_score, plata, prec, recall)
names(outPut) <- c("F1_score", "Plata", "Precission" , "Recall")
# Agrego a la salida el valor del área bajo la curva roc
auc_metrics <- twoClassSummary(data, lev, model)
return(c(outPut, auc_metrics[1]))
}
message("Armado de la función METRICAS. LISTO")
# Regresion Logistica
horainicio <- Sys.time()
print(horainicio)
logisticFit <- train(y ~ .,
data = BancoTraining,
method = "glm",         #glm --> regresion logistica
trControl = fitControl,
family = binomial)
horafin <- Sys.time()
runningtime <- horafin - horainicio
print(runningtime)
#-----------------------------------------------------
#Estructura del experimento
#-----------------------------------------------------
fitControl <- trainControl(method = "cv",
number = 3,
verboseIter = T,
classProbs = TRUE,
summaryFunction = metricas)
#------------------------------------------------------
# Modelo Arbol de Decision
# Regresion Logistica
horainicio <- Sys.time()
print(horainicio)
logisticFit <- train(y ~ .,
data = BancoTraining,
method = "glm",         #glm --> regresion logistica
trControl = fitControl,
family = binomial)
horafin <- Sys.time()
runningtime <- horafin - horainicio
print(runningtime)
print(logisticFit)
# Posgrado Introducción a la Minería de Datos
# Proyecto Banco -
# Autor: Ing. Ruben Flecha
# Elimino todo lo que haya en memoria
rm(list=ls())
# Defino el directoria de trabajo
setwd("C:/Users/Ruben/UTN_DM1C2015")
#Confirmo mi directorio de trabajo
getwd()
# Importo librerías
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("caret"))  install.packages("caret")
library(caret)
if(!require("pROC"))  install.packages("pROC")
library(pROC)
if(!require("sqldf")) install.packages("sqldf")
library(sqldf)
if(!require("plyr")) install.packages("plyr")
library(plyr)
if(!require("dplyr")) install.packages("dplyr")
library(dplyr)
if(!require("doParallel"))  install.packages("doParallel")
library(doParallel)
library(rpart)
library(C50)
library(mlbench)
# Cargo los datos del banco
message("Cargando datos...")
datos_banco <- read.table("banco6_remix.csv", sep = ",", header = T)
message("Carga de datos --> LISTO!!!")
# Re escalo la varible y para que "si" sea la clase por defecto
class(datos_banco$edad)
datos_banco <- within(datos_banco, y <- relevel(y, ref = "si"))
# Separo en training y testing ()
set.seed(1234) # Semilla para que todos tengamos lo mismo
muestra <- sample(c(1:nrow(datos_banco)),
size = nrow(datos_banco)/10,
replace=FALSE)
BancoTraining <- datos_banco[-muestra,]
BancoTesting  <- datos_banco[muestra,]
# Construyo las métricas
message("Armado de la función METRICAS....")
metricas <- function(data, lev = NULL, model = NULL, ...)
{
# Armo la clase predicha en función a una p
# Probabilidad que voy a usar como corte para un "si"
predicho <- ifelse(data$si > 0.3, "si", "no")
# F1 score. Esta es la métrica que me ayuda a elegir el mejor modelo.
true_pos  <- sum(predicho == "si" & data$obs == "si")
false_pos <- sum(predicho == "si" & data$obs == "no")
false_neg <- sum(predicho == "no" & data$obs == "si")
F1_score  <- (2 * true_pos) / (2 * true_pos + false_neg + false_pos)
# Precission
prec <- sum(predicho == "si" & data$obs== "si") / sum(predicho == "si")
# Recall
recall <- sum(predicho == "si" & data$obs== "si") / sum(data$obs == "si")
#Me Interesa evaluar con otra variable que a mi me interese, por ejemplo: Plata
plata <-         750 * sum(predicho == "si" & data$obs== "si")
plata <- plata - 100 * sum(predicho == "si" & data$obs== "no")
plata <- plata - 750 * sum(predicho == "no" & data$obs== "si")
names(plata) <- "Plata"
# Armo el vector de outPut
outPut <- c(F1_score, plata, prec, recall)
names(outPut) <- c("F1_score", "Plata", "Precission" , "Recall")
# Agrego a la salida el valor del área bajo la curva roc
auc_metrics <- twoClassSummary(data, lev, model)
return(c(outPut, auc_metrics[1]))
}
message("Armado de la función METRICAS. LISTO")
#-----------------------------------------------------
#Estructura del experimento
#-----------------------------------------------------
fitControl <- trainControl(method = "cv",
number = 3,
verboseIter = T,
classProbs = TRUE,
summaryFunction = metricas)
#------------------------------------------------------
# Modelo Arbol de Decision
# Modelo Random Forest
horainicio <- Sys.time()
print(horainicio)
modelorf <- train(y ~ .,
data = BancoTraining,
method = "rf",
trControl = fitControl,
metric = "Plata")
horafin <- Sys.time()
runningtime <- horafin - horainicio
print(runningtime)
print(modelorf)
# Elimino todo lo que haya en memoria
rm(list=ls())
# Defino el directoria de trabajo
setwd("C:/Users/Ruben/UTN_DM1C2015")
#Confirmo mi directorio de trabajo
getwd()
# Importo librerías
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("caret"))  install.packages("caret")
library(caret)
if(!require("pROC"))  install.packages("pROC")
library(pROC)
if(!require("sqldf")) install.packages("sqldf")
library(sqldf)
if(!require("plyr")) install.packages("plyr")
library(plyr)
if(!require("dplyr")) install.packages("dplyr")
library(dplyr)
if(!require("doParallel"))  install.packages("doParallel")
library(doParallel)
library(rpart)
library(C50)
library(mlbench)
# Cargo los datos del banco
message("Cargando datos...")
datos_banco <- read.table("banco6_remix.csv", sep = ",", header = T)
message("Carga de datos --> LISTO!!!")
# Separo en training y testing ()
set.seed(1234) # Semilla para que todos tengamos lo mismo
muestra <- sample(c(1:nrow(datos_banco)),
size = nrow(datos_banco)/10,
replace=FALSE)
BancoTraining <- datos_banco[-muestra,]
BancoTesting  <- datos_banco[muestra,]
# Construyo las métricas
message("Armado de la función METRICAS....")
metricas <- function(data, lev = NULL, model = NULL, ...)
{
# Armo la clase predicha en función a una p
# Probabilidad que voy a usar como corte para un "si"
predicho <- ifelse(data$si > 0.3, "si", "no")
# F1 score. Esta es la métrica que me ayuda a elegir el mejor modelo.
true_pos  <- sum(predicho == "si" & data$obs == "si")
false_pos <- sum(predicho == "si" & data$obs == "no")
false_neg <- sum(predicho == "no" & data$obs == "si")
F1_score  <- (2 * true_pos) / (2 * true_pos + false_neg + false_pos)
# Precission
prec <- sum(predicho == "si" & data$obs== "si") / sum(predicho == "si")
# Recall
recall <- sum(predicho == "si" & data$obs== "si") / sum(data$obs == "si")
#Me Interesa evaluar con otra variable que a mi me interese, por ejemplo: Plata
plata <-         750 * sum(predicho == "si" & data$obs== "si")
plata <- plata - 100 * sum(predicho == "si" & data$obs== "no")
plata <- plata - 750 * sum(predicho == "no" & data$obs== "si")
names(plata) <- "Plata"
# Armo el vector de outPut
outPut <- c(F1_score, plata, prec, recall)
names(outPut) <- c("F1_score", "Plata", "Precission" , "Recall")
# Agrego a la salida el valor del área bajo la curva roc
auc_metrics <- twoClassSummary(data, lev, model)
return(c(outPut, auc_metrics[1]))
}
message("Armado de la función METRICAS. LISTO")
#-----------------------------------------------------
#Estructura del experimento
#-----------------------------------------------------
fitControl <- trainControl(method = "cv",
number = 3,
verboseIter = T,
classProbs = TRUE,
summaryFunction = metricas)
#------------------------------------------------------
# Modelo Gradient Boosting
horainicio <- Sys.time()
print(horainicio)
modelogboost <- train(y ~ ., data = BancoTraining,
method = "gbm",
trControl = fitControl,
tuneLength = 20,
verbose = FALSE)
horafin <- Sys.time()
runningtime <- horafin - horainicio
print(modelogboost)
